

namespace System;

class Game

	public static native func void forceAutosave();
	
	public static native func long getTickCount();
	
	public static native func float getSecondsPerTick();

end


class Timer

	private long startTicks = 0;
	private long stopTicks = 0;
	private int running = 0;

	public init()
	
	end
	
	public func void start()
	
		startTicks = Game:getTickCount();
	
		running = 1;
	
	end
	
	public func stop()
	
		stopTicks = Game:getTickCount();
	
		running = false;
	
	end
	
	public func long getTicksPassed()
	
		if(running)
		
			return Game:getTickCount() - startTicks;
		
		else
		
			return stopTicks - startTicks;
		
		end
	
	end
	
	public func float getSecondsPassed()
	
		return getTicksPassed() * Game:getSecondsPerTick();
	
	end
	
end


block n:r:u
n = nest id
r = row id
u = unique id


block 0:0:0
{
 
	var i
	var j

	block 1:0:1
	{
	
		var k
		vars: i,j,k
		
	}
	
	block 1:1:2
	{
		var k2
		vars: i,j,k2 #i: cn > vn
		
		block 2:0:3
		{
			var l
			vars: i,j,k2,l
		
		}
		
		block 2:1:4
		{
			#the row id change is proportional to the uid change
		}
		
	}
	
	block 1:2:5 #begin
	{
	
		block 2:0:6
		{
			var k5
			
			vars: i,j,k5 
			
			block 3:0:7
			{
			
				block 4:0:8
				{
				
				}
			
			}
		
		}
		
		block 2:1:9
		{
			var k6
			
			vars: i,j,k6
			
			block 3:0:10
			{
				var k7
			
				vars: i,j,k6,k7
			}
		}
		
		block 2:2:11
		{
			block 3:0:12
			{
			
				block 4:0:13
				{
				
				}
			
			}
		}
	}
}
	
	
bool isVarInScope(Scope currentScope, Scope varScope)
{

	if(currentScope.nestID < variableScope.nestID)
	{
		return false;
		
	}else if(currentScope.nestID == variableScope.nestID)
	{
		return currentScope.uID == variableScope.uID;
			
	}else if(currentScope.nestID > variableScope.nestID)
	{
		return (currentScope.nestID - variableScope.nestID) == (currentScope.uID - variableScope.uID - currentScope.rowID);
	}

}




