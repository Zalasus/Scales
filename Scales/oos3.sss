
namespace System;

class OutI binds nrpg_ni_console

	public static native func void println(string s);
	
end


namespace Util;

class Integer

	private int value;

	public func int getValue();

	public init(int i)
	
		value = i;
	
	end
	
	public init()
	
		this(0);
		
	end
	
	public func int getValue()
	
		return value;
	
	end

end


class Math

	private object o = new Integer();
	private int i = (o -> Integer).getValue();

	private object o2 = i -> object;

	#*
	 * Just for demonstration. This function would ordinarily be implemented as native static.
	 * Don't consider this sample as an example for good coding practice. 
	 *#
	public func int mod(int a, int mod)
	
		return a - (a/mod) * mod; #Since a and mod both are ints, the the division will yield a floored int instead of a float
	
	end

end


namespace NotTheSame;

class Integer

	public init() 
	
	end

end


namespace default;

class App end

class Main extends App binds Scales_App

	using Util:Integer;

	int i = 1;
	
	public string f;
	
	private native func void foo();

	public func void main()
	
		Util:Integer i = new Integer(); # thanks to the 'using'-statement, the namespace can be ommitted
		
		#static calls are not yet supported
		#System:Out:println("The quick brown fox jumps over the lazy dog");
	
		foo();
	
		if(i)
		
		
		elseif(i+1)
		
		else
		
		end
		
	
	end

	using NotTheSame:Integer; # redefinition of imports are allowed

	public func void foo()
	
		NotTheSame:Integer i = new Integer();
	
	end
	
	public func int boo()
	
	end
	
	public func void xyz()
	
		foo();
		
		boo();
		
		int i = boo();
		
		#i = foo();
	
	end

	i = 1234;

end 

namespace inheritance;

class sup

	public int i;
	private int j;

end


class sub extends sup

	public string i;

	func void f()
	
		i = "asdf";
	
		parent.i = 10;
		
		
	
	end
	

end


namespace threading;

class test1

	public int foo = 100;

	# assume this function is called by thread A
	func void doStuff()
	
	
	
		do
		
			
		while((foo -= 1) > 0);
	
	end


end

class test2 binds scales_ni_threading_test

	native func void nativeFunc();

	# assume this function is called by thread B
	func void doDifferentStuff()
	
		nativeFunc();
	
	end

end


