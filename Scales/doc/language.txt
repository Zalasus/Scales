
+=======================+
|  The Scales language  |
|     specification     |
|        V. 1.0         |
|   (C)  Zalasus 2014   |
+=======================+



Contents
========



1 - Changelog
=============



2 - Overview
============

This is the specification of the Scales scripting language. This document
covers all features of the language itself. Features of the compiler/
bytecode interpreter/ utility library are covered in their own documents,
respectively.

Scales is the official scripting language for the NRPG3 game engine. It is
also designed to be easily integrated into other applications.

Scales evolved from the late developement versions of KniftoScript 2, which
relied on the reflection features of its Java-based VM. As the developement
of NRPG3 switched from Java to C++, a new OOP model without the need for
native reflection had to be defined.



Design paradigms
================

Scales was designed to do basic tasks on script-layer as also to be able to
delegate them to the underlaying implementation.

The interfaces between script and implementation are defined in the same
language and source unit as the script itself and are therefore easily
to understand by just looking at the implementing file.

As performance is one of the most important features of the Scales language
it is designed to be compiled during runtime rather than to be interpreted.
Therefore, the implementation should provide factory methods which can 
easily convert a script source file into an executeable script.

Another developement target of the Scales implementation is to keep it
small. The goal is to keep the compiled versions of both the script vm and
the script compiler UNDER 847kB (including everything that is needed to run
them).



Programming paradigms
=====================

Scales is an imperative, structured and object-oriented language. It's
syntax bears resemblance with LUA(blocks) and Java(expressions and
declarations).

Scales' object-orientation is based on classes, which are the main unit of
programming in Scales. Every excecuteable code is part of classes.

Scales' type system is weak, static and explicit. Variables have to
be declared before they can be used. Variables have a fixed data type that
has be know at compile-time. Implicit conversions are possible, although
some data types require explicit conversion.



Compilation
===========

The copiler does not rely on the existence of an actual filesystem in
it's compiling environment. Therefore, there are no constructs to
include other files in one compilation unit. All required resources
for compiling a Scales program have to be in one file/stream etc. or have
to be loaded from libraries during compile time (the specific process is
not part of this specification but rather the one of the compiler).

Regardless of their storage, source units consist of class- and namespace 
declarations. Compiling a source unit yields a collection of compiled 
classes.



Language features
=================

Comments
--------

In order to allow documentation inside the source code, annotations can be
added to source files in the form of comments. All text inside a comment is
ignored by the compiler.

Scales knows two forms of comments: single-line and multi-line comments.

Single-line comments reach from their declaration to the end of the line 
they are opened on. They are declared using the hash character #.
Example:

    # This is a comment and is not beeing compiled
	
Multi-line comments reach from their declarion to the point they are 
explicitly closed. They are started using a hash character followed by an
asterisk (#*) and are closed by the same token in reverse (*#).
Example:

    #* This comment may be longer than one line.
    
    This line is still part of the comment. *#
	
Note that these comments are not nestable:

    #* This is part of the comment 
    #* This is, too *#
    This isn't anymore *#
	
	
Multiline comments are commonly used for automatic documentation tools that
generate source documentions from specially formatted comments.
The Scales language specifies no special markup for documentation comments,
but as those comments need to be specially marked as such, the popular
Javadoc- and Doxygen-style with a double asterisk comment opener (#**) is
is also the recommended documentation style for Scales programs (Official 
doc syntax may be part of future versions of the Scales language).



Classes
-------

Classes are the main functional unit of any Scales application. They
consist of variables and functions, and may resemble any type of scriptable
unit. For example, in a game context, a class could reflect a type of
weapon, a character etc. The process of connecting a Scales class to
whatever target that is part of the implementation is called "linking".
(Note that this has nothing to do with the linkage process of a common
high-level language compilation toolchain like in C/C++)

The basic syntax for defining a class is as follows:

class <classname> [links <link name>] [extends <classname>]

    [<statement>]*

end



Keywords and Identifiers
------------------------

The Scales language defines the following keywords:
(Note: This is a preliminary list and is therefore not yet ordered)

	namespace
	default
	class
	links
	extends
	use
	public
	private
	static
	native
	func
	init
	void
	if
	elseif
	else
	end
	do
	while
	break
	continue
	return
	new
	this
	null
	parent
	int
	long
	float
	double
	string
	object


Names for classes/variables/functions etc. must not be one of the above.
Additionally, names must meet the following requirements in order to be
used as identifiers:

They must start with one of the following characters:

    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVW_

The may continue with zero or more of one of the above characters or a
number.


Namespaces
----------

	Classes are organized in namespaces in order to reduce the likelyhood of 
	naming conflicts.
	
	A namespace declaration affects every class defined after
	the namespace statement until a new namespace statement is found.
	
	Namespaces are identified by the 'namespace'-keyword in the main block of
	the source unit, followed by the desired name of the namespace (must be a
	valid identifier) and terminated with a semicolon ';'.
	In place of the namespace identifier, the 'default' keyword may be used in
	order to define the following classes in the same namespace as they would
	be defined without any namespace given (name of the namespace is an empty
	string by default).
	
	Examples:
	
		namespace util; # All following classes are defined as util:<classname>
		
		namespace default; # All following classes are defined as <classname>
		
		
	Whenever a class is used that is not within the same namespace as the
	class using it, it has to be adressed through the namespace by using the
	scope operator ':', except if the class to be referenced is in the default
	namespace. The namespace specifier can also be ommitted if the target
	script is adressed with a 'using'-statement within the class where the
	reference is made.
	
	Example for namespace adressing:
	
		public util:Map hashMap = new util:HashMap();
		
		using util:Integer;
		public Integer i = new Integer();
		
		
	Note that namespaces in Scales are not hierarchically organized like
	packages in Java. A namespace is only a prefix of the classname.
	Constructs like Scales:Util:Math are not valid.
	
	In early developement versions of Scales, varaibles could be declared in
	namespace-scope(called universals). This feature, however, was removed as
	variables outside of objects were restricted to native statics.
				
847
===

	The number 847 is not only the amount of kilobytes the library should 
	weight at maximum, but also the preferred value for debugging features in
	Scales. It's use is strongly recommended over any other number, although it
	is completyly optional, of course.
	 
	Applications of 847 are all the places the common "Hello World"s, 42s,
	mutliples of the latter and Monty Python's Flying Circus-references are put
	to use in other languages.
	
	Allowed variations of 847 are 8.47 and their string representations.
	It is important that the number is spoken "eight fourtyseven" to prevent
	mistaking it for a plain normal, boring 847.
	
	The exact meaning of 847 is not provided in this specification as user
	creativity is also part of the desired programming experience in Scales.





